#+title: Config

Literal (private) configuration. Remember, you do not need to
run ~doom sync~ after modifying this file!

* Personal Information
Some functionality uses this to identify you, e.g. GPG configuration,
email clients, file templates and snippets.
#+begin_src emacs-lisp :tangle yes
(setq user-full-name "Romeo Valentin"
      user-mail-address "romeo@romeov.me")
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package! org
  :config
  (add-to-list '+org-babel-mode-alist '(julia . julia-snail))
  (setq org-image-actual-width 300))
#+end_src



Here are some additional functions/macros that could help you configure Doom:

- ~load!~ for loading external *.el files relative to this one
- ~use-package!~ for configuring packages
- ~after!~ for running code after a package has loaded
- ~add-load-path!~ for adding directories to the ~load-path~, relative to this file. Emacs searches the ~load-path~ when you load packages with ~require~ or ~use-package~.
- ~map!~ for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
This will open documentation for it, including demos of how they are used.

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
they are implemented.

* Doom themeing
Doom exposes five (optional) variables for controlling fonts in Doom. Here
are the three important ones:
+ =doom-font=
+ =doom-variable-pitch-font=
+ =doom-big-font= -- used for =doom-big-font-mode=; use this for presentations or streaming.

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
font string. You generally only need these two:
~(setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
      doom-variable-pitch-font (font-spec :family "sans" :size 13))=

#+begin_src emacs-lisp :tangle yes
;; (setq doom-font (font-spec :family "Roboto Mono" :size 15))
;; (setq doom-font (font-spec :family "Julia Mono" :size 15))
(setq doom-font (font-spec :family "IosevkaTerm Nerd Font Mono" :size 13))
#+end_src

There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the
`load-theme' function. This is the default:
(setq doom-theme 'doom-one)
#+begin_src emacs-lisp :tangle yes
;; (setq doom-theme 'doom-monokai-ristretto)
;; (setq doom-theme 'doom-gruvbox-light)
;; (setq doom-theme 'modus-operandi)
(setq doom-theme 'modus-vivendi)
#+end_src

* General configuration
** General keymaps
Define some keybindings to
- open notes on bibliographic files,
- activate spell-checking, and
- inserting unicode symbols.
#+begin_src elisp :tangle yes
;; This seems to have been added by default
;; (map! :map doom-leader-notes-map
;;       "b" #'citar-open-notes)
(map! :map doom-leader-open-map
      "_" #'ranger)
;; (map! :map doom-leader-toggle-map
;;       "s" #'flyspell-mode)
;; (map! :map evil-insert-state-map
;;       "M-TAB" #'julia-latexsub-or-indent)
(map! :map evil-normal-state-map
      "g /" #'evil-avy-goto-char-timer)
;; (map! :map org-mode-map
;;       "M-TAB" #'julia-latexsub-or-indent)
(map! :mode org-mode :map doom-leader-toggle-map
      "p" #'org-inline-pdf-mode)
(map! :mode org-mode :map evil-org-mode-map
      "<motion-state> ] h" #'org-forward-heading-same-level
      "<motion-state> [ h" #'org-backward-heading-same-level
      "<motion-state> M-]" #'org-forward-heading-same-level
      "<motion-state> M-[" #'org-backward-heading-same-level
      "<motion-state> [ H" #'outline-up-heading)
(map! :map org-mode-map :localleader
      "." (lambda () (interactive) (consult-org-heading nil 'tree)))
(map! :map org-mode-map :localleader
      (:prefix-map ("L" . "org-latex")
                   "p" #'org-latex-preview))
(map! :map minibuffer-mode-map
      "C-c C-a" #'embark-act)
(map! :map doom-leader-code-map
      "l" #'eval/line-or-region)
(map! :map doom-leader-map
      "TAB {" #'+workspace/swap-left
      "TAB }" #'+workspace/swap-right)

(map! :map doom-leader-notes-map
      "B" #'citar-open)
(map! :map dired-mode-map
      "<normal-state> O" #'image-dired-dired-display-external
      ;; "<normal-state> RET" #'dired-find-alternate-file)  ;; close dired buffer on "RET" so it's not in the 'last buffer'
      "<normal-state> RET" #'dired-find-file)  ;; close dired buffer on "RET" so it's not in the 'last buffer'
(map! :map doom-leader-notes-map
      "A" #'org-agenda-list
      "t" (lambda () (interactive) (find-file "/home/romeo/org/todo_notes/todo.org")))
(setq image-dired-external-viewer "imv")
#+end_src


** Magit
*** Magit revision mode maps
#+begin_src emacs-lisp :tangle yes
;; (map! :map magit-revision-mode
;;       "<normal-state> O" #'image-dired-dired-display-external)
(defun romeov/julia-registrator-register-current-commit ()
  "Comment on upstream commit to activate the Julia Registrator."
  (interactive)
  (require 'magit)
  (let ((rev magit-buffer-revision-hash))
    ;; First try formatting the resource.
    (forge--format-resource
    ;; This must be a `forge-object', "mytopic" is not.
    ;; `default-directory' must be inside the appropriate repository.
    (forge-get-repository t)
    ;; Note that it is "commits" not "commit".
    (format "/repos/:owner/:repo/commits/%s/comments" rev))
    ;; If that works, try making a request.
    (forge--ghub-post (forge-get-repository t)
        (format "/repos/:owner/:repo/commits/%s/comments" rev)
        '((body . "@JuliaRegistrator register"))
        :callback  (forge--post-submit-callback)
        :errorback (forge--post-submit-errorback))))
;; This yields
;;   error in process filter: Wrong type argument: arrayp, nil
;; but it's not an issue.
#+end_src

#+RESULTS:
: romeov/julia-registrator-register-current-commit
*** untracked files
#+begin_src emacs-lisp :tangle yes
(after! magit
  (setq! magit-section-initial-visibility-alist '((stashes . hide) (untracked . hide) )))
#+end_src
*** code-review
#+begin_src emacs-lisp :tangle yes
(use-package! code-review
  :config
  (setq code-review-auth-login-marker 'forge))
#+end_src

** Other doom options
Enable
- line numbers,
- scroll margin, and
- more fine grained undo.
#+begin_src emacs-lisp :tangle yes
(setq display-line-numbers-type t
      evil-want-fine-undo t
      scroll-margin 8)
#+end_src

Use 80MB undo-limit.
#+begin_src emacs-lisp :tangle yes
(setq undo-limit 80000000)
#+end_src

With a large scroll margin, eglot popups often move my code, which is annoying...
#+begin_src emacs-lisp :tangle yes
(setq scroll-margin 4)
#+end_src

Split window below and right.
#+begin_src emacs-lisp :tangle yes
(setq evil-vsplit-window-right t
      evil-split-window-below t)
#+end_src

After window split, prompt for buffer.
#+begin_src emacs-lisp :tangle yes
(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (consult-buffer))
#+end_src


** Autocomplete keybindings
Never use =return= or =tab= to autocomplete, instead rely on =C-SPC=.
#+begin_src emacs-lisp :tangle yes
(map! :after company :map company-active-map
      "TAB" nil
      [tab] nil
      "RET" nil
      [return] nil
      "C-SPC" #'company-complete-selection
      ;; I forgot what this next line is supposed to do...
      ;; (add-hook 'evil-normal-state-entry-hook #'company-abort)
      )
#+end_src
** Difftastic
#+begin_src emacs-lisp :tangle no
(use-package! difftastic
  :demand t
  :bind (:map magit-blame-read-only-mode-map
         ("D" . difftastic-magit-show)
         ("S" . difftastic-magit-show))
  :config
  (eval-after-load 'magit-diff
    '(transient-append-suffix 'magit-diff '(-1 -1)
       [("D" "Difftastic diff (dwim)" difftastic-magit-diff)
        ("S" "Difftastic show" difftastic-magit-show)])))
#+end_src
** Modus themes
#+begin_src emacs-lisp :tangle yes
(use-package! modus-themes)
#+end_src

** Tramp
Try to remedy weird slowdown when using projectile and tramp together.
See https://www.reddit.com/r/emacs/comments/320cvb/projectile_slows_tramp_mode_to_a_crawl_is_there_a/
#+begin_src emacs-lisp :tangle yes
;; (defadvice projectile-project-root (around ignore-remote first activate)
;;     (unless (file-remote-p default-directory) ad-do-it))
#+end_src

Also, for some servers we already have a "Control" setup installed in the ssh config (e.g. for sherlock).
For those, we want to remove any control options from the ssh connection, which are currently inserted as "%c" into the tramp method,
which in turn evaluates =tramp-ssh-controlmaster-options=.
We define a new ssh connection type here that doesn't override the controlmaster options.

We can actually also tell tramp to delegate the control master stuff to base ssh.
#+begin_src emacs-lisp :tangle no
(after! tramp
  (add-to-list 'tramp-methods '("sshnocm"
                                (tramp-login-program "ssh")
                                (tramp-login-args
                                 (("-l" "%u")
                                  ("-p" "%p")
                                  ("-e" "none")
                                  ("%h")))
                                (tramp-async-args
                                 (("-q")))
                                (tramp-direct-async t)
                                (tramp-remote-shell "/bin/sh")
                                (tramp-remote-shell-login
                                 ("-l"))
                                (tramp-remote-shell-args
                                 ("-c")))))
#+end_src

*** Remote path problems
Sometimes the remote path doesn't have some stuff that I need. See here: https://stackoverflow.com/a/26649558/5616591
You can set the following:
#+begin_src emacs-lisp :tangle yes
(after! tramp
  :config
  (add-to-list 'tramp-remote-path 'tramp-own-remote-path)
  (setq vterm-tramp-shells '(("docker" "/bin/sh")
                             ("ssh" "/bin/bash")
                             ("sshx" "/bin/bash")))
  (customize-set-variable
   'tramp-ssh-controlmaster-options
   (concat
    "-o ControlPath=/tmp/ssh-ControlPath-%%r@%%h:%%p "
    "-o ControlMaster=auto -o ControlPersist=yes"))
  ;; (setq tramp-use-ssh-controlmaster-options nil)
  )
#+end_src

** Minibuffer
#+begin_src emacs-lisp :tangle yes
(remove-hook! 'doom-escape-hook '+popup-close-on-escape-h)
#+end_src
** Avy
#+begin_src emacs-lisp :tangle yes
(setq avy-timeout-seconds 0.3)
#+end_src
** evil
make evil-snipe go across the current line (i.e. when pressing =s=)
#+begin_src emacs-lisp :tangle yes
(use-package! evil-snipe
  :config
  (setq evnil-snipe-scope 'visible))
#+end_src

** authinfo
#+begin_src emacs-lisp :tangle yes
(setq auth-sources '("/home/romeo/.emacs.d/.local/state/authinfo.gpg" "~/.authinfo.gpg" "~/.authinfo"))
#+end_src
** agenix
#+begin_src emacs-lisp :tangle yes
(use-package! agenix
  :config
  ;; (advice-add 'agenix-mode :before
  ;;         (lambda ()
  ;;         (run-hooks 'hack-local-variables-hook)))
  (setq agenix-key-files '( "~/.ssh/hetzner" ))
  )
#+end_src

* Eglot
Use longer connection timeout. Especially important in Julia projects.
#+begin_src emacs-lisp :tangle yes
(after! eglot
  :config
  (setq eglot-connect-timeout 600))
#+end_src
** Eglot booster
Supposedly this speeds up eglot. Probably disable if we have weird eglot issues.
#+begin_src emacs-lisp :tangle yes
(use-package! eglot-booster
	:after eglot
	:config (eglot-booster-mode))
#+end_src

* typst

#+begin_src emacs-lisp :tangle no
(use-package typst-ts-mode
  :ensure (:type git :host sourcehut :repo "meow_king/typst-ts-mode" :files (:defaults "*.el"))
  :custom
  ;; (optional) If you want to ensure your typst tree sitter grammar version is greater than the minimum requirement
  ;; Note this only check and compare file modification time
  (typst-ts-mode-grammar-location (expand-file-name "tree-sitter/libtree-sitter-typst.so" user-emacs-directory)))
#+end_src

* vterm
** Always compile module
When running =doom sync~, sometimes compiling packages depending on vterm
can get stuck. This should fix it. See [[https://github.com/doomemacs/doomemacs/issues/5592#issuecomment-945919856][this github issue]] for more info.

#+begin_src emacs-lisp :tangle yes
(after! vterm
  :config
  (setq vterm-always-compile-module t)
  ;; Remove C-w from auto-insert
  (push '"C-w" vterm-keymap-exceptions)
  (map! :map vterm-mode-map "<insert-state> C-w" evil-window-map)  ;; This makes it so we can window in vterm
  ;; (map! :map global-map "C-w" nil)
  ;; (map! :map evil-insert-state-map "C-w" nil)
)
#+end_src

** vterm auto insert
I want to go back to the "repl" after pressing insert.
This snippet is from [[https://github.com/akermu/emacs-libvterm/issues/313#issuecomment-706509709][here]].

#+begin_src emacs-lisp :tangle yes
(defun evil-collection-vterm-insert (count &optional vcount skip-empty-lines)
  (interactive
   (list (prefix-numeric-value current-prefix-arg)
         (and (evil-visual-state-p)
              (memq (evil-visual-type) '(line block))
              (save-excursion
                (let ((m (mark)))
                  ;; go to upper-left corner temporarily so
                  ;; `count-lines' yields accurate results
                  (evil-visual-rotate 'upper-left)
                  (prog1 (count-lines evil-visual-beginning evil-visual-end)
                    (set-mark m)))))
         (evil-visual-state-p)))
  (evil-insert count vcount skip-empty-lines)
  (let ((p (point)))
    (vterm-reset-cursor-point)
    (while (< p (point))
      (vterm-send-left)
      (forward-char -1))
    (while (> p (point))
      (vterm-send-right)
      (forward-char 1))))
;;(evil-define-key 'normal 'vterm-mode-map
;;  "i" 'evil-collection-vterm-insert
;;  "a" 'evil-collection-vterm-append)
;; (evil-define-key 'insert 'vterm-mode-map
;;   (kbd "C-w") nil)
#+end_src

** Isend
Here we basically replace the functionality of Neoterm's TREPLSend.
We need to associate a terminal to every buffer (slightly annoying but no major problem) with ~isend-associate~ and then can either send lines/regions or use the REPL "include" functionality.
We also bind it to the same leader as it is in my nvim config :)
#+begin_src emacs-lisp :tangle yes
(defun my/julia-include-file ()
  "Include current file"
  (interactive)
  (require 'vterm 'isend)
  (let* ((fname (tramp-file-local-name buffer-file-name))
         (incl-string (concat "include("
                              (prin1-to-string fname) ;; surround with quotes->"<text>"
                              ")")))
    (isend--send-dest incl-string isend--command-buffer)))

(map! :map julia-mode-map :leader
      (:prefix-map ("\\" . "isend")
                   "l" #'isend-send
                   "f" #'my/julia-include-file
                   "a" #'isend-associate))
#+end_src

#+begin_src emacs-lisp :tangle yes
(map! :map vterm-mode-map :localleader
      "C-c" #'vterm-send-C-c
      ;; "C-w" #'vterm-send-C-w
      "C-a" #'vterm-send-C-a
      "ESC" #'vterm-send-escape
      )
(map! :map vterm-mode-map
      "<insert-state> C-c" #'vterm--self-insert
      "<insert-state> C-w" nil
      "C-q" #'vterm-send-next-key)
(setq vterm-always-compile-module t)
#+end_src

We actually use the doom emacs direnv package now.
#+begin_src elisp :tangle yes
;; (use-package direnv
;;   :config
;;   (direnv-mode))
#+end_src

Add auto-save hook when exiting insert mode.
This doesn't seem to work though...
#+begin_src emacs-lisp :tangle yes
;; (add-hook! 'evil-insert-state-exit-hook :append (lambda() (call-interactively #'evil-write)))
#+end_src
** Chat / Claude keybindings
#+begin_src emacs-lisp :tangle yes
(map! :leader
      (:prefix-map ("C" . "Chat/Claude")
                   "m" #'gptel-menu
                   "C" #'gptel))
#+end_src

** Python include file
#+begin_src emacs-lisp :tangle yes :eval never :tangle no
(defun my/ipython-include-file ()
  "Insert text of current line in vterm and execute."
  (interactive)
  (require 'vterm)
  (let ((buf (current-buffer))
        (command (concat "%run " (buffer-file-name)))
        )
    (vterm)
    (vterm--goto-line -1)
    ;; (message command)
    (vterm-send-string command)
    (vterm-send-return)
    (switch-to-buffer-other-window buf)
    ))
#+end_src
** Python include file 2.0 (idk why I have this twice?)
Create "send file to vterm" with =%run=.
#+begin_src emacs-lisp :tangle yes
(defun ipython-run-file ()
  (interactive)
  (let ((project-root (projectile-acquire-root)))
    (if (projectile-project-p)
        (let ((file (projectile-completing-read "%run file: "
                                                (projectile-dir-files project-root))))
          (isend--send-dest
           (concat"%run " file)
           (get-buffer isend--command-buffer))))))

(map! :map python-mode-map :localleader
      "f" #'ipython-run-file
      "s" #'isend-send
      "a" #'isend-associate)
#+end_src

#+begin_src emacs-lisp :tangle yes
(map! :map vterm-mode-map
      "C-c C-c" #'vterm-send-C-c)

(after! isend
  (setq isend-strip-empty-lines t))
#+end_src

* Latex
Add some shortcuts to ~cdlatex~ so we can print $\circ$ and $\mathbb{R}$.
Note that the numbers correspond to the ~int->char~ in the C sense.
#+begin_src emacs-lisp :tangle yes
(after! cdlatex
  (add-to-list 'cdlatex-math-modify-alist
    '(66 "\\mathbb" "\\textbb" t nil nil))
  (add-to-list 'cdlatex-math-symbol-alist
    '(99 ("\\circ")))
  (add-to-list 'cdlatex-math-symbol-alist
    '(84 ("\\intercal")))
  (add-to-list 'cdlatex-math-modify-alist
    '(84 nil "\\intercal" nil nil nil))
  (setq TeX-electric-sub-and-superscript nil)
  (setq TeX-command-extra-options "-shell-escape")
)
#+end_src

When trying to compile inline tikz plots, the pdf backend uses some huge ~article~ class by default.
We replace it with a standalone class.

#+begin_src elisp :tangle yes
;; (setq org-format-latex-header "\\documentclass[border=5pt]{standalone}
;; [PACKAGES]
;; [DEFAULT-PACKAGES]
;; ")
#+end_src

* Julia
Don't start eglot by default.
#+begin_src emacs-lisp :tangle no
(after! julia-mode
  (setq julia-mode-local-vars-hook (remove-hook 'lsp! 'julia-mode-local-vars-hook)))
#+end_src

Use own eglot-jl
#+begin_src emacs-lisp :tangle yes
;; (use-package! eglot-jl
;;   :load-path "/home/romeo/Documents/github/eglot-jl"
;;   )

#+end_src

;; (add-hook! julia-repl-mode
;;   (map! :leader
;;         (:prefix-map ("m" . "mode")
;;          (:desc "Eval buffer" "b" #'julia-repl-send-buffer
;;           :desc "Eval region or line" "s" #'julia-repl-send-region-or-line
;;           )))
;;   )

Try to modify popup rule to make larger repl
#+begin_src emacs-lisp :tangle yes
(after! julia
  (set-popup-rule! "^\\julia" :height 0.4 :size 0.5))
#+end_src
#+begin_src emacs-lisp :tangle no
(use-package julia-ts-mode
  ;; :ensure t
  ;; :mode "\\.jl$"
  )
#+end_src

** Keybinding for activating project
#+begin_src emacs-lisp :tangle yes
(map! :map julia-mode-map :localleader
      "A" (lambda () (interactive)
            (julia-snail-package-activate (projectile-acquire-root))
            (julia-snail--send-to-repl
             (concat "using "
                     (s-replace
                      ".jl" ""
                     (file-name-nondirectory (substring (projectile-acquire-root) 0 -1)))
                     ))))
#+end_src

* AI stuff
** GPTel
#+begin_src emacs-lisp :tangle yes :results none
(use-package! gptel
  :config

  (let ((backend-gemini (gptel-make-gemini "Gemini" :key "AIzaSyDUm7TCEbvgpAPXDmWGzDAvfN5iNjah0vA" :stream t))
        (backend-anthropic (gptel-make-anthropic "Claude"          ;Any name you want
                             :stream t                             ;Streaming responses
                             :key #'gptel-api-key-from-auth-source
                             ))
        (backend-llama (gptel-make-openai                    ;Not a typo, same API as OpenAI
                           "llama-cpp"                          ;Any name
                         :stream t                            ;Stream responses
                         :protocol "http"
                         :host "localhost:8081"               ;Llama.cpp server location, typically localhost:8080 for Llamafile
                         :key nil                             ;No key needed
                         :models '("test"))))                   ;Any names, doesn't matter for Llama

    (setq-default gptel-backend backend-anthropic
                  gptel-model "claude-3-5-sonnet-20240620")))
;; gptel-model   "test")))
#+end_src

** Copilot
#+begin_src emacs-lisp :tangle no
;; accept completion from copilot and fallback to company
(use-package! copilot
  :hook (prog-mode . copilot-mode)
  :bind (:map copilot-completion-map
              ("<tab>" . 'copilot-accept-completion)
              ("TAB" . 'copilot-accept-completion)
              ("C-TAB" . 'copilot-accept-completion-by-word)
              ("C-<tab>" . 'copilot-accept-completion-by-word)))
#+end_src
* Python
For python, specify some arguments for the ~black~ formatter (line length).
#+begin_src emacs-lisp :tangle yes
(after! format
  (set-formatter! 'black "black -q --line-length=119 -")
  )
#+end_src

** Don't start anaconda mode
#+begin_src emacs-lisp :tangle yes
(remove-hook! 'python-mode-local-vars-hook '+python-init-anaconda-mode-maybe-h)
#+end_src

#+RESULTS:

** Poetry
#+begin_src emacs-lisp :tangle yes
(after! poetry
  :config
  (set-default 'poetry-tracking-mode -1)
  (remove-hook! 'python-mode-hook 'poetry-tracking-mode)
  (setq poetry-tracking-strategy 'projectile)
  (remove-hook! 'projectile-before-switch-project-hook 'poetry-track-virtualenv))
#+end_src

#+RESULTS:

* Org mode configuration
If you use `org' and don't want your org files in the default location below,
change `org-directory'. It must be set before org loads!
#+begin_src emacs-lisp :tangle yes
(setq org-directory "~/org/")
#+end_src

** Completion for target and names
Target:
#+begin_src emacs-lisp :tangle yes :results none
(use-package! consult)
(defun my/org-get-link-to-target ()
  (interactive)
  (let* ((elements (org-element-map (org-element-parse-buffer) 'target
                     (lambda (keyword) (org-element-property :value keyword))))
         (name (consult--read
                elements
                :prompt "Select target: ")))
    name))
(org-link-set-parameters "target" :complete #'my/org-get-link-to-target)
#+end_src

Names (from [[https://libreddit.romeov.me/r/orgmode/comments/y0l90j/how_to_get_completion_for_name_when_creating_links/][here]]).
#+begin_src emacs-lisp :tangle yes :results none
(defun my/org-complete-names ()
  "`completing-read' for org elements with #+NAME in the current buffer."
  (interactive)
  (let ((candidates (org-element-map (org-element-parse-buffer) org-element-all-elements
                      (lambda (arg) (org-element-property :name arg)))))
    (consult--read candidates
                   :prompt "Select named element: ")))
(org-link-set-parameters "name" :complete #'my/org-complete-names)
#+end_src



** Org capture
From https://karelvo.com/blog/orgmode/

#+begin_src emacs-lisp :tangle yes
(after! org-capture
  (setq org-capture-templates
        '(("t" "todo" entry
           (file+headline "~/org/todo_notes/todo.org" "TODOs")
           "* TODO %?")
          ("T" "todo today" entry
           (file+headline "~/org/todo_notes/todo.org" "TODOs today")
           "* TODO %?\nDEADLINE: %t")
          ("i" "inbox" entry
           (file "~/org/todo_notes/inbox.org")
           "* %?")
          ("v" "clip to inbox" entry
           (file "~/org/todo_notes/inbox.org")
           "* %x%?")
          )
        )
)
#+end_src
** Ctrl-ret keybindings
#+begin_src emacs-lisp :tangle yes
(after! org
  (map! :map evil-org-mode-map
        "<insert-state> C-<return>" nil
        "<normal-state> C-<return>" nil)
  (map! :map org-mode-map
        "C-<return>" nil
        "C-<return>" nil)
  (map! :map evil-org-mode-map
        "<insert-state> C-<return>" #'org-insert-heading
        "<normal-state> C-<return>" #'org-insert-heading)
  (map! :map org-mode-map
        "C-<return>" #'org-insert-heading
        "C-<return>" #'org-insert-heading))
#+end_src

** Element cache
Currently, we're having a problem rendering equations and other stuff when using the element cache, so we turn it off...
#+begin_src emacs-lisp :tangle no
(setq org-element-use-cache nil)
#+end_src

** Org-screenshot
#+begin_src emacs-lisp :tangle yes
(defun my-org-attach-screenshot-insert (linkfilename)
  "Default function for inserting the image link into the document.
The image's filename is passed as the only argument `LINKFILENAME'."
  (insert (concat
           "#+attr_org: :width 300" "\n"
           "[[file:" linkfilename "]]")))
(use-package org-screenshot
  :config
  (setq org-attach-screenshot-insertfunction 'my-org-attach-screenshot-insert))
#+end_src
** org-download
#+begin_src emacs-lisp :tangle yes
(use-package! org-download
  :config
  (setq org-download-screenshot-method "grim -g \"$(slurp)\" %s"))
#+end_src

** Bugs
I get a ~org-element-with-disabled-cache~ error, so we disable the element cache for now (whatever that means).
#+begin_src emacs-lisp :tangle no
(setq org-element-use-cache nil)

#+end_src

** org appear
#+begin_src emacs-lisp :tangle no
(add-hook! org-mode
    'org-appear-mode)
#+end_src

** babel -> minted
Translate ~ob-julia~ blocks to ~minted~ environments in latex.
#+begin_src emacs-lisp :tangle yes
;; (add-hook! org-mode
  ;; (add-to-list 'org-latex-packages-alist '("" "algorithm2e"))
;;   (setq org-latex-custom-lang-environments
;;       '(
;;         (julia "\\begin{%f}
;; \\begin{minted}[%o]{julia}
;; %s\\end{minted}
;; \\caption{%c}
;; \\label{%l}\\end{%f}")
;;         (julia-vterm "\\begin{%f}
;; \\begin{minted}[%o]{julia}
;; %s\\end{minted}
;; \\caption{%c}
;; \\label{%l}\\end{%f}")
;;         (jupyter-julia "\\begin{%f}
;; \\begin{minted}[%o]{julia}
;; %s\\end{minted}
;; \\caption{%c}
;; \\label{%l}\\end{%f}")
;;         ))
  ;; (add-to-list 'org-babel-load-languages '(julia . t))
  ;; (add-to-list 'org-babel-load-languages '(julia-vterm . t))
  ;; (org-babel-do-load-languages 'org-babel-load-languages org-babel-load-languages)
  ;; (setq org-babel-execute:julia 'org-babel-execute:julia-vterm)
;; )
#+end_src

#+RESULTS:

** Export to latex
Configure using ~tufte_algorithms_book~ template.
#+begin_src emacs-lisp :tangle yes
(after! ox-latex
  :config
  (add-to-list 'org-latex-classes
               '("tufte_algorithms_book"
                 "\\documentclass{tufte_algorithms_book}
                   [NO-DEFAULT-PACKAGES]"
                 ("\\chapter{%s}" . "\\chapter*{%s}")
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
  (add-to-list 'org-latex-classes
               '("review" "\\documentclass[11pt]{article}"
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+end_src



Make sure ~julia~ source blocks are run as ~julia-vterm~.
#+begin_src emacs-lisp :tangle yes
(use-package! eglot-jl
  :config
  (setq eglot-jl-language-server-project "~/.julia/environments/v1.10")
  (setq max-mini-window-height 0.1) ;; preview window for eldoc
  )
;; (use-package! ob-julia-vterm
;;   :config
;;   (defalias 'org-babel-execute:julia 'org-babel-execute:julia-vterm)
;;   (defalias 'org-babel-variable-assignments:julia 'org-babel-variable-assignments:julia-vterm)
;;   )
#+end_src


** Latex subfigure
/Note, this doesn't work anymore atm.../
Custom script to parse ~subcaption~ figures. See https://github.com/linktohack/ox-latex-subfigure.

#+begin_src emacs-lisp :tangle no
(use-package! ox-latex-subfigure
  :init
  (setq org-latex-prefer-user-labels nil)
  :config (require 'ox-latex-subfigure))
#+end_src


** Citations and bibliography
Configure bibliography.
#+begin_src emacs-lisp :tangle yes
(use-package! citar
  :config
  (setq! citar-bibliography '("/home/romeo/Zotero/zotero-bibliography.bib" "/home/romeo/org/roam/fefe-on-crypto.bib"))
  (setq! citar-notes-paths '("/home/romeo/org/roam/Notes"))
  (setq! citar-at-point-function 'embark-act)
  (defun citar-file-open (file)  ;; open pdf in external viewer
    "Open FILE."
    (if (member (file-name-extension file) '("html" "pdf"))
        (citar-file-open-external (expand-file-name file))
      (funcall citar-file-open-function (expand-file-name file))))
  ;; (citar-filenotify-setup '(LaTeX-mode-hook org-mode-hook)) ;; autosync .bib file
  )
#+end_src



** cdlatex
I'm annoyed that cdlatex auto-inserts brackets ={}=, so I'm mapping it to ~C-c ^~ and ~C-c _~ instead.
Only now to get =a_{\rm foo}= we have to also press ~C-c~ twice, but so be it.
#+begin_src emacs-lisp :tangle yes
(map! :map org-cdlatex-mode-map
      "^" nil
      "_" nil
      "C-c ^" #'org-cdlatex-underscore-caret
      "C-c _" #'org-cdlatex-underscore-caret)
;; also consider setting variable Tex-electric-sub-and-superscript to nil
#+end_src

** Agenda
Make the agenda filename column longer
#+begin_src emacs-lisp :tangle yes :results none
(after! org
        (setq org-agenda-prefix-format
        '((agenda . " %i %-10:c%?-16t% s")  ;; '%-20' sets 20 char width field for the agenda "filename"
          (todo   . " %i %-10:c")
          (tags   . " %i %-12:c")
          (search . " %i %-12:c"))))
#+end_src

Some other tips from the workflow blog: https://karelvo.com/blog/orgmode/

- View today and +6 days
- List overdue tasks to today, with the number of days it’s overdue
- +No “deadline coming up” mentions in the agenda (I found them annoying)+
- Only show TODO and WAIT tasks, not DONE and KILL

#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-agenda-span 14
        org-agenda-start-day "-0d"
        org-deadline-warning-days 0

        org-agenda-deadline-leaders
          '("" "" "-%2d d.: ")

        org-agenda-skip-function-global
          '(org-agenda-skip-entry-if 'todo 'done)
        org-log-done 'time)
)
#+end_src
** Writeroom
Don't turn on the mixed pitch mode in writeroom mode...
#+begin_src emacs-lisp :tangle yes
(use-package! writeroom-mode
  :config
  (remove-hook 'writeroom-mode-hook
    #'+zen-enable-mixed-pitch-mode-h))
#+end_src

#+RESULTS:
: t
** Org-tufte export
#+begin_src emacs-lisp :tangle yes
(use-package! org-tufte
  )
;; (use-package! ox-tufte)

#+end_src
** Image width
* Markdown
** enable eww preview with refresh

First, open another window and run ~eww-open~. Then, in the markdown buffer export with ~SPACE m e~ and then call ~romeov/reload-eww~.
#+begin_src emacs-lisp :tangle yes
(defun romeov/reload-eww ()
    (interactive)
    (save-window-excursion
        (other-window 1)
        (if (derived-mode-p 'eww-mode)
            (eww-reload)
            (let ((current-mode ( buffer-local-value 'major-mode (current-buffer))))
                (message "Current mode: %s" (symbol-name current-mode)))
          )))
(add-hook
    'markdown-after-export-hook
    #'romeov/reload-eww
 )
#+end_src

#+RESULTS:
: romeov/reload-eww

* Tree-sitter
** ts-movement
#+begin_src emacs-lisp :tangle no
(use-package! ts-movement
  :config
  (map! :map evil-visual-state-map
        "M-o" #'tsm/node-parent
        "M-i" #'tsm/node-child
        "M-n" #'tsm/node-next
        "M-p" #'tsm/node-prev
        "M-a" #'tsm/node-start
        "M-e" #'tsm/node-end
        "M-m" #'tsm/node-mark
        "M-l" #'tsm/delete-overlay-at-point
:map evil-normal-state-map
            "M-S-l" #'tsm/clear-overlays
        )
  (advice-add 'evil-force-normal-state :after 'tsm/delete-overlay-at-point)
  )

#+end_src
** Evil textobs
#+begin_src emacs-lisp :tangle no
;; (use-package! evil-ts
;;   :config
;;   (after! evil-ts
;;     (require 'rx)
;;     (evil-define-text-object my-julia-fn-def (count &optional beg end type)
;;         (evil-ts-select-obj "function_definition"))
;;     (evil-define-text-object my-julia-struct-def (count &optional beg end type)
;;         (evil-ts-select-obj "struct_definition"))))
;; (map! :map evil-inner-text-objects-map
;;       "F" #'my-julia-fn-def
;;       "S" #'my-julia-struct-def)
;; (map! :map evil-outer-text-objects-map
;;       "F" #'my-julia-fn-def
;;       "S" #'my-julia-struct-def)
(use-package! evil-textobj-tree-sitter
  :config
  ;; bind `function.outer`(entire function block) to `f` for use in things like `vaf`, `yaf`
  (define-key evil-outer-text-objects-map "f" (evil-textobj-tree-sitter-get-textobj "function.outer"))
  ;; bind `function.inner`(function block without name and args) to `f` for use in things like `vif`, `yif`
  (define-key evil-inner-text-objects-map "f" (evil-textobj-tree-sitter-get-textobj "function.inner")))
#+end_src




** Remapping the modes :noexport:
#+begin_src emacs-lisp :tangle no
(use-package! treesit
  :preface
  (dolist (mapping '((julia-mode . julia-ts-mode)
                     (python-mode . python-ts-mode)))
    (add-to-list 'major-mode-remap-alist mapping))
  :config
  ;; (mp-setup-install-grammars)
  ;; Do not forget to customize Combobulate to your liking:
  ;;
  ;;  M-x customize-group RET combobulate RET
  )
#+end_src

#+begin_src emacs-lisp :tangle no
(use-package! combobulate
  :preface
  ;; You can customize Combobulate's key prefix here.
  ;; Note that you may have to restart Emacs for this to take effect!
  (setq combobulate-key-prefix "C-c o")

  ;; Optional, but recommended.
  ;;
  ;; You can manually enable Combobulate with `M-x
  ;; combobulate-mode'.
  :hook ((julia-ts-mode . combobulate-mode)
         (python-ts-mode . combobulate-mode))
  ;; Amend this to the directory where you keep Combobulate's source
  ;; code.
  )
#+end_src



* org-ai

#+begin_src elisp :tangle yes
(use-package org-ai
  :ensure
  :commands (org-ai-mode)
  :init
  (add-hook 'org-mode-hook #'org-ai-mode)
  :config
  ;; if you are using yasnippet and want `ai` snippets
  (org-ai-install-yasnippets)
  )
#+end_src

* symex (disabled)  :noexport:
This is supposed to integrate with treesitter to provide structural editing...
#+begin_src emacs-lisp :tangle no
(use-package! symex
  :config
  (symex-initialize))  ; or whatever keybinding you like
(map! :map evil-normal-state-map
      "|" #'symex-mode-interface)
#+end_src
